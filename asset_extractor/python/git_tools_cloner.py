import os
import requests
from zipfile import ZipFile
from io import BytesIO
from dotenv import load_dotenv

def extract_git_zip(zip_ref : ZipFile, save_path: str):
    #top_level_folder : e.g. "OpenValidator-Gitabcdef1234567890" (the top level folder auto-generated by GitHub when downloading a ZIP)
    top_level_folder = zip_ref.namelist()[0].split('/')[0] 
    for member in zip_ref.namelist():
        # strip the top_level_folder + /
        member_path = member[len(top_level_folder) + 1:]  
        target_path = os.path.join(save_path, member_path)

        # create directory (if the member is a dir) 
        if zip_ref.getinfo(member).is_dir(): #  = member.endswith('/'):
            os.makedirs(target_path, exist_ok=True)
        else:
            # otherwise simply extract (member is file)
            with zip_ref.open(member) as source_file:
                with open(target_path, 'wb') as target_file:
                    target_file.write(source_file.read())

def get_github_tools(repo_url: str, save_path: str):
    # convert the GitHub URL to the API URL for downloading archives
    owner_repo = repo_url.split('github.com/')[-1].replace('.git', '')
    api_url = f"https://api.github.com/repos/{owner_repo}/zipball/"

    load_dotenv()
    token = os.getenv('GITHUB_TOKEN')
    if not token:
        raise ValueError("GitHub token is not set in environment variables.")
    headers = {
        'Authorization': f'token {token}',
        "Accept": 'application/vnd.github.v3+json'
    }

    # Send GET request to download the repository as a zip
    resp = requests.get(api_url, headers=headers)
    if resp.status_code == 200:
        with ZipFile(BytesIO(resp.content)) as zip_ref:
            extract_git_zip(zip_ref,save_path)
        print(f"Repository extracted to {save_path}")
    else:
        print(f"Failed to download repo. Status code: {resp.status_code}")
        print(resp.text)

def main():
    # Define the folder where you want to save the files
    download_dir = "/app/python/tools"
    os.makedirs(download_dir, exist_ok=True)

    # Hardcoded URLs to download files from
    tools_to_download = [
        "https://github.com/GAIA-X4PLC-AAD/provider-tools.git",
        "https://github.com/GAIA-X4PLC-AAD/OpenValidator.git"
    ]

    # Download provider-tools and extract directly into python/tools
    provider_tools_url = tools_to_download[0]
    get_github_tools(provider_tools_url, download_dir)

    # Download OpenValidator and extract into the OpenValidator folder in python/tools
    open_validator_url = tools_to_download[1]
    open_validator_path = os.path.join(download_dir, "OpenValidator")
    os.makedirs(open_validator_path, exist_ok=True)
    get_github_tools(open_validator_url, open_validator_path)

if __name__ == "__main__":
    main()